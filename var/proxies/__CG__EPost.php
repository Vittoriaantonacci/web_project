<?php

namespace DoctrineProxies\__CG__;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class EPost extends \EPost implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'EPost' . "\0" . 'idPost', '' . "\0" . 'EPost' . "\0" . 'title', '' . "\0" . 'EPost' . "\0" . 'description', '' . "\0" . 'EPost' . "\0" . 'category', '' . "\0" . 'EPost' . "\0" . 'creation_time', '' . "\0" . 'EPost' . "\0" . 'isRemoved', '' . "\0" . 'EPost' . "\0" . 'profile', '' . "\0" . 'EPost' . "\0" . 'images', '' . "\0" . 'EPost' . "\0" . 'comments', '' . "\0" . 'EPost' . "\0" . 'likes'];
        }

        return ['__isInitialized__', '' . "\0" . 'EPost' . "\0" . 'idPost', '' . "\0" . 'EPost' . "\0" . 'title', '' . "\0" . 'EPost' . "\0" . 'description', '' . "\0" . 'EPost' . "\0" . 'category', '' . "\0" . 'EPost' . "\0" . 'creation_time', '' . "\0" . 'EPost' . "\0" . 'isRemoved', '' . "\0" . 'EPost' . "\0" . 'profile', '' . "\0" . 'EPost' . "\0" . 'images', '' . "\0" . 'EPost' . "\0" . 'comments', '' . "\0" . 'EPost' . "\0" . 'likes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (EPost $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(?\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(?\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdPost(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdPost();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdPost', []);

        return parent::getIdPost();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationTime(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationTime', []);

        return parent::getCreationTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationTimeStr(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationTimeStr', []);

        return parent::getCreationTimeStr();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsRemoved(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsRemoved', []);

        return parent::getIsRemoved();
    }

    /**
     * {@inheritDoc}
     */
    public function getProfile(): \EProfile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfile', []);

        return parent::getProfile();
    }

    /**
     * {@inheritDoc}
     */
    public function getImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function getLikes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikes', []);

        return parent::getLikes();
    }

    /**
     * {@inheritDoc}
     */
    public function getLikedByUser($idUser): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLikedByUser', [$idUser]);

        return parent::getLikedByUser($idUser);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle(string $title): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(string $category): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationTime(\DateTime $dateTime): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationTime', [$dateTime]);

        parent::setCreationTime($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function setRemoved(bool $isRemoved): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemoved', [$isRemoved]);

        parent::setRemoved($isRemoved);
    }

    /**
     * {@inheritDoc}
     */
    public function setProfile(\EProfile $profile): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProfile', [$profile]);

        parent::setProfile($profile);
    }

    /**
     * {@inheritDoc}
     */
    public function addImage(\EImage $image): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addImage', [$image]);

        parent::addImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function addComment(\EComment $comment): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', [$comment]);

        parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function addLike(\ELikes $like): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLike', [$like]);

        parent::addLike($like);
    }

    /**
     * {@inheritDoc}
     */
    public function removeImage(\EImage $image): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeImage', [$image]);

        parent::removeImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment(\EComment $comment): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', [$comment]);

        parent::removeComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLike(\ELikes $like): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLike', [$like]);

        parent::removeLike($like);
    }

}
